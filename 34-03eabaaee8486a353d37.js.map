{"version":3,"sources":["webpack:///./src/components/accordion.js"],"names":["Wrapper","styled","div","Curve","TabsWrapper","TabBox","PanelWrapper","color","grey1","orange1","Button","button","Content","Icon","cn","args","filter","Boolean","join","Tab","children","useTabState","isActive","onClick","className","panel","hidden","height","visible","Panel","usePanelState","animate","transition","ease","duration","variants","Accordion","faq","partialVisibility","once","isVisible","items","map","item","question","console","log","answer","el","id","to","url","text","list","listitem"],"mappings":"4FAAA,gIAUMA,EAAUC,IAAOC,IAAV,yEAAGD,CAAH,yHAYPE,EAAQF,IAAOC,IAAV,uEAAGD,CAAH,2GAaLG,EAAcH,IAAOC,IAAV,6EAAGD,CAAH,oEAOXI,EAASJ,IAAOC,IAAV,wEAAGD,CAAH,yGASNK,EAAeL,IAAOC,IAAV,8EAAGD,CAAH,sbAkBLM,IAAMC,MAWJD,IAAME,SAsBfC,EAAST,IAAOU,OAAV,wEAAGV,CAAH,wPAwBNW,EAAUX,IAAOC,IAAV,yEAAGD,CAAH,yJAcPY,EAAOZ,IAAOC,IAAV,sEAAGD,CAAH,8JAcJa,EAAK,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAaA,EAAKC,OAAOC,SAASC,KAAK,MAE5CC,EAAM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACEC,cAAtBC,EADoB,EACpBA,SAAUC,EADU,EACVA,QAElB,OACE,kBAACb,EAAD,CAAQc,UAAWV,EAAG,gBAAiBQ,GAAY,UAAWC,QAASA,GACpEH,IAKDK,EAAQ,CACZC,OAAQ,CAAEC,OAAQ,GAClBC,QAAS,CAAED,OAAQ,SAGfE,EAAQ,SAAC,GAAkB,IAAhBT,EAAe,EAAfA,SACTE,EAAWQ,cAEjB,OACE,kBAAC,IAAO5B,IAAR,CAAYsB,UAAU,kBAAkBO,QAAST,EAAW,UAAY,SAAUU,WAAY,CAAEC,KAAM,UAAWC,SAAU,IAAOC,SAAUV,GACzIL,IAwDQgB,UAnDG,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACnB,OACE,kBAAC,IAAD,CAAkBC,mBAAiB,EAACC,MAAI,IACrC,gBAAGC,EAAH,EAAGA,UAAH,OACC,kBAACxC,EAAD,CAASwB,UAAWgB,EAAY,gBAAkB,WAChD,kBAACrC,EAAD,KACE,kBAAC,IAAD,OAEF,kBAAC,IAAD,KACE,kBAACC,EAAD,KACGiC,EAAII,MAAMC,KAAI,SAACC,GAAD,OACb,kBAACtC,EAAD,KACE,kBAACc,EAAD,KACE,kBAACN,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACD,EAAD,KACE,8BAAO+B,EAAKC,YAGhB,kBAACf,EAAD,KACE,kBAACvB,EAAD,KACGuC,QAAQC,WAAWH,EAAKI,QACD,iBAAhBJ,EAAKI,OACX,2BAAIJ,EAAKI,QAAc,KAED,iBAAhBJ,EAAKI,OACX,2BAAIJ,EAAKI,OAAOL,KAAI,SAACM,EAAIC,GAAL,OACpBA,EAAK,EAAI,kBAAC,OAAD,CAAMC,GAAIF,EAAGG,KAAb,IAAuBH,EAAGI,KAA1B,KAA4CJ,EAAGI,SAEtD,KAGHT,EAAKU,MACJ,4BACGV,EAAKU,KAAKX,KAAI,SAACY,GAAD,OACb,4BAAKA","file":"34-03eabaaee8486a353d37.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\"\nimport styled from \"styled-components\";\nimport { Tabs, useTabState, usePanelState } from \"@bumaga/tabs\";\nimport { motion } from \"framer-motion\";\nimport { color } from \"./styles/colors\"\nimport ArrowSVG from \"../images/arrow-circle.inline.svg\";\nimport CurveSVG from \"../images/orange-curve.inline.svg\";\nimport VisibilitySensor from \"./VisibilitySensor\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  position: relative;\n  margin-top: 80px;\n\n  @media (min-width: 768px) {\n    width: auto;\n    padding: 25px 29px 0;\n  }\n`;\n\nconst Curve = styled.div`\n  height: 25px;\n  width: 25px;\n  position: absolute;\n  top: -16px;\n  left: -13px;\n\n  @media (min-width: 768px) {\n    top: 0;\n    left: 0;\n  }\n`;\n\nconst TabsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 770px;\n`;\n\nconst TabBox = styled.div`\n  box-shadow: 0 24px 32px 0 rgba(236, 236, 236, 0.5);\n  margin-bottom: 8px;\n\n  .accordion-panel {\n    overflow: hidden;\n  }\n`;\n\nconst PanelWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: #fff;\n\n  margin-bottom: 7px;\n  padding: 15px;\n  z-index: 1;\n\n  @media (min-width: 768px) {\n    padding: 24px 40px 40px 80px;\n  }\n\n  h3 {\n    margin-bottom: 48px;\n  }\n\n  p, li {\n    color: ${color.grey1};\n    font-family: Avenir, sans-serif;\n    max-width: 650px;\n    text-align: left;\n  }\n\n  p {\n    font-size: 16px;\n    line-height: 24px;\n\n    a {\n      color: ${color.orange1};\n      font-size: inherit;\n      line-height: inherit;\n      text-decoration: none;\n    }\n  }\n\n  li {\n    font-size: 14px;\n    line-height: 19px;\n  }\n\n  ul {\n    //list-style: none;\n    padding-left: 16px;\n\n    li {\n      padding-top: 16px;\n    }\n  }\n`;\n\nconst Button = styled.button`\n  height: 80px;\n  width: 100%;\n  line-height: 80px;\n  color: #4e4e4e;\n  background: #fff;\n  display: flex;\n  cursor: pointer;\n\n  position: relative;\n  border-radius: 5px;\n  overflow: hidden;\n  border: none;\n\n  &.active {\n    border-radius: 5px 5px 0 0;\n    font-weight: 600;\n\n    svg {\n      transform: rotate(0deg);\n    }\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-grow: 1;\n  padding-right: 40px;\n\n  span {\n    color: #4e4e4e;\n    font-family: Avenir;\n    font-size: 16px;\n  }\n`;\n\nconst Icon = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 80px;\n  width: 80px;\n  opacity: 0.75;\n\n  svg {\n    transform: rotate(180deg);\n    transition: transform 0.3s ease;\n  }\n`;\n\nconst cn = (...args) => args.filter(Boolean).join(\" \");\n\nconst Tab = ({ children }) => {\n  const { isActive, onClick } = useTabState();\n\n  return (\n    <Button className={cn(\"accordion-tab\", isActive && \"active\")} onClick={onClick}>\n      {children}\n    </Button>\n  );\n};\n\nconst panel = {\n  hidden: { height: 0 },\n  visible: { height: \"auto\" },\n};\n\nconst Panel = ({ children }) => {\n  const isActive = usePanelState();\n\n  return (\n    <motion.div className=\"accordion-panel\" animate={isActive ? \"visible\" : \"hidden\"} transition={{ ease: \"easeOut\", duration: 0.3 }} variants={panel}>\n      {children}\n    </motion.div>\n  );\n};\n\nconst Accordion = ({ faq }) => {\n  return (\n    <VisibilitySensor partialVisibility once>\n      {({ isVisible }) => (\n        <Wrapper className={isVisible ? \"slideUp enter\" : \"slideUp\"}>\n          <Curve>\n            <CurveSVG />\n          </Curve>\n          <Tabs>\n            <TabsWrapper>\n              {faq.items.map((item) => (\n                <TabBox>\n                  <Tab>\n                    <Icon>\n                      <ArrowSVG />\n                    </Icon>\n                    <Content>\n                      <span>{item.question}</span>\n                    </Content>\n                  </Tab>\n                  <Panel>\n                    <PanelWrapper>\n                      {console.log(typeof item.answer)}\n                      {typeof item.answer === 'string' ?\n                        <p>{item.answer}</p> : null\n                      }\n                      {typeof item.answer === 'object' ?\n                        <p>{item.answer.map((el, id) => (\n                        id % 2 ? <Link to={el.url}>{` ${el.text} `}</Link> : el.text\n                        ))}</p> \n                        : null\n                      }\n                      {/* <p>{item.answer}</p> */}\n                      {item.list && (\n                        <ul>\n                          {item.list.map((listitem) => (\n                            <li>{listitem}</li>\n                          ))}\n                        </ul>\n                      )}\n                    </PanelWrapper>\n                  </Panel>\n                </TabBox>\n              ))}\n            </TabsWrapper>\n          </Tabs>\n        </Wrapper>\n      )}\n    </VisibilitySensor>\n  );\n};\nexport default Accordion;\n"],"sourceRoot":""}