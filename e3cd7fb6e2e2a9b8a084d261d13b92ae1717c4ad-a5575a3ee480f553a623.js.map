{"version":3,"sources":["webpack:///./src/components/arrow-link.js","webpack:///./src/components/image.js"],"names":["Wrapper","styled","a","Arrow","div","ArrowLink","children","className","href","Image","props","query","render","data","image","images","edges","find","n","node","relativePath","includes","filename","imageFluid","childImageSharp","fluid","alt"],"mappings":"4rlFAAA,iDAIMA,EAAUC,IAAOC,EAAV,sEAAGD,CAAH,2JAqBPE,EAAQF,IAAOG,IAAV,oEAAGH,CAAH,wJAwBII,IARG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAb,OAChB,kBAACP,EAAD,CAASQ,KAAK,IAAID,UAAWA,GAC3B,kBAACJ,EAAD,KACE,kBAAC,IAAD,OAEF,8BAAOG,M,sICRIG,IAlCD,SAAAC,GAAK,OACjB,kBAAC,cAAD,CACEC,MAAK,aAiBLC,OAAQ,SAAAC,GACN,IAAMC,EAAQD,EAAKE,OAAOC,MAAMC,MAAK,SAAAC,GACnC,OAAOA,EAAEC,KAAKC,aAAaC,SAASX,EAAMY,aAG5C,IAAKR,EACH,OAAO,KAGT,IAAMS,EAAaT,EAAMK,KAAKK,gBAAgBC,MAE9C,OAAO,kBAAC,IAAD,CAAKC,IAAKhB,EAAMgB,IAAKD,MAAOF,KA7BvC","file":"e3cd7fb6e2e2a9b8a084d261d13b92ae1717c4ad-a5575a3ee480f553a623.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport ArrowSVG from \"../images/arrow.inline.svg\"\n\nconst Wrapper = styled.a`\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  \n  span {\n    transition: color 0.3s ease;\n    font-weight: 600;\n  }\n\n  &:hover {\n    color: #fd8550;\n\n    svg {\n      path {\n        fill: #fd8550;\n      }\n    }\n  }\n`\n\nconst Arrow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 12px;\n  width: 12px;\n  margin-right: 10px;\n\n  svg {\n    path {\n      transition: fill 0.3s ease;\n      fill: #5088fd;\n    }\n  }\n`\n\nconst ArrowLink = ({ children, className }) => (\n  <Wrapper href=\"#\" className={className}>\n    <Arrow>\n      <ArrowSVG />\n    </Arrow>\n    <span>{children}</span>\n  </Wrapper>\n)\nexport default ArrowLink\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nconst Image = props => (\n  <StaticQuery\n    query={graphql`\n      query {\n        images: allFile {\n          edges {\n            node {\n              relativePath\n              name\n              childImageSharp {\n                fluid(maxWidth: 520) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      const image = data.images.edges.find(n => {\n        return n.node.relativePath.includes(props.filename)\n      })\n\n      if (!image) {\n        return null\n      }\n\n      const imageFluid = image.node.childImageSharp.fluid\n\n      return <Img alt={props.alt} fluid={imageFluid} />\n    }}\n  />\n)\nexport default Image\n"],"sourceRoot":""}